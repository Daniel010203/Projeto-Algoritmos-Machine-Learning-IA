 Projeto de Transfer Learning em Python 
O projeto consiste em aplicar o método de Transfer Learning em uma rede de Deep Learning na linguagem Python no ambiente COLAB.  

Para exemplo, utilizaremos o seguinte projeto que realiza Transfer Learning com o Dataset do MNIST: 
https://colab.research.google.com/github/kylemath/ml4a-guides/blob/master/notebooks/transfer-learning.ipynb 

O dataset utilizado engloba duas classes: gatos e cachorros. Uma descrição da base de dados pode ser visualizada neste link: https://www.tensorflow.org/datasets/catalog/cats_vs_dogs. 

Já o dataset para download pode ser acessado por meio deste outro link:

https://www.microsoft.com/en-us/download/details.aspx?id=54765. 

 

Observações: Neste projeto, você pode usar sua própria base de dados (exemplo: fotos suas, dos seus pais, dos seus amigos, dos seus animais domésticos, etc), o exemplo de gatos e cachorros, pode ser substituído por duas outras classes do seu interesse. O Dataset criado em nosso projeto anterior, pode ser utilizado agora.  



import numpy as np
import tensorflow as tf
from transformers import BertTokenizer, TFBertForSequenceClassification
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

def load_data():
    """Load and return the example dataset."""
    texts = [
        "Eu adorei esse filme!",
        "Terrível, não recomendaria a ninguém.",
        "Um filme mediano, nada de especial."
    ]
    labels = [1, 0, 1]  # 1 for positive, 0 for negative
    return texts, labels

def preprocess_data(texts, labels, test_size=0.2, max_length=64):
    """Split data into train and test sets, and tokenize texts."""
    train_texts, test_texts, train_labels, test_labels = train_test_split(
        texts, labels, test_size=test_size, random_state=42)
    
    tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
    
    train_encodings = tokenizer(train_texts, truncation=True, padding=True, max_length=max_length, return_tensors='tf')
    test_encodings = tokenizer(test_texts, truncation=True, padding=True, max_length=max_length, return_tensors='tf')
    
    train_labels = tf.convert_to_tensor(train_labels)
    test_labels = tf.convert_to_tensor(test_labels)
    
    return train_encodings, test_encodings, train_labels, test_labels

def build_model():
    """Build and compile the BERT model for sequence classification."""
    model = TFBertForSequenceClassification.from_pretrained('bert-base-uncased')
    optimizer = tf.keras.optimizers.Adam(learning_rate=5e-5)
    loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)
    
    model.compile(optimizer=optimizer, loss=loss, metrics=['accuracy'])
    
    return model

def train_model(model, train_encodings, train_labels, epochs=3, batch_size=8):
    """Train the model with the given data."""
    model.fit(train_encodings, train_labels, epochs=epochs, batch_size=batch_size)

def evaluate_model(model, test_encodings, test_labels):
    """Evaluate the model and print the loss and accuracy."""
    loss, accuracy = model.evaluate(test_encodings, test_labels)
    print(f'Loss: {loss}, Accuracy: {accuracy}')
    
def make_predictions(model, test_encodings):
    """Make predictions using the trained model and return predicted labels."""
    predictions = model.predict(test_encodings)
    predicted_labels = np.argmax(predictions.logits, axis=1)
    return predicted_labels

def print_classification_report(test_labels, predicted_labels):
    """Print the classification report."""
    print(classification_report(test_labels, predicted_labels))

def main():
    """Main function to load data, preprocess, train, evaluate, and make predictions."""
    texts, labels = load_data()
    train_encodings, test_encodings, train_labels, test_labels = preprocess_data(texts, labels)
    model = build_model()
    train_model(model, train_encodings, train_labels)
    evaluate_model(model, test_encodings, test_labels)
    predicted_labels = make_predictions(model, test_encodings)
    print_classification_report(test_labels, predicted_labels)

if __name__ == "__main__":
    main()
